--- 
# tasks file for YugabyteDB setup

- name: Create yugabyte user if not exists
  user:
    name: "{{ yugabyte_user }}"
    shell: /bin/bash
    create_home: true
    password: "{{ 'anand' | password_hash('sha512') }}"

- name: Download YugabyteDB tarball
  get_url:
    url: "{{ yugabyte_tarball_url }}"
    dest: "/tmp/yugabyte.tar.gz"
    mode: '0644'

- name: Extract YugabyteDB
  unarchive:
    src: "/tmp/yugabyte.tar.gz"
    dest: "{{ yb_home_dir }}"
    remote_src: yes
    creates: "{{ yb_install_dir }}"
    owner: "{{ yugabyte_user }}"
    group: "{{ yugabyte_user }}"
  become: true

- name: Set environment variables for yugabyte user
  copy:
    dest: "{{ yb_home_dir }}/.bashrc"
    content: |
      # .bashrc
      export PATH={{ yugabyte_bin }}:$PATH
    owner: "{{ yugabyte_user }}"
    group: "{{ yugabyte_user }}"
    mode: '0644'

- name: Add yugabyte sudo permissions for systemctl
  copy:
    dest: /etc/sudoers.d/yugabyte
    mode: '0440'
    content: |
      yugabyte ALL=(ALL:ALL) NOPASSWD: /bin/systemctl start yugabyted.service, \
      /bin/systemctl stop yugabyted.service, \
      /bin/systemctl restart yugabyted.service, \
      /bin/systemctl daemon-reload
    validate: 'visudo -cf %s'

- name: Validate sudoers file syntax
  command: visudo -cf /etc/sudoers.d/yugabyte

- name: Ensure #includedir /etc/sudoers.d is present
  lineinfile:
    dest: /etc/sudoers
    line: '#includedir /etc/sudoers.d'
    state: present
    validate: 'visudo -cf %s'

- name: Create default config directory
  file:
    path: "{{ yb_home_dir }}/.conf"
    state: directory
    owner: "{{ yugabyte_user }}"
    group: "{{ yugabyte_user }}"

- name: Create data directories
  file:
    path: "{{ item }}"
    state: directory
    owner: "{{ yugabyte_user }}"
    group: "{{ yugabyte_user }}"
    mode: '0755'
  loop:
    - "{{ yb_data_dir }}"
    - "{{ yb_data_dir }}/master"
    - "{{ yb_data_dir }}/tserver"

- name: Ensure yugabyte home exists
  file:
    path: "{{ yugabyte_home }}"
    state: directory
    owner: "{{ yugabyte_user }}"
    group: "{{ yugabyte_user }}"
    mode: '0755'

- name: Ensure Yugabyte data directory exists
  file:
    path: "{{ yugabyte_data_dir }}"
    state: directory
    owner: "{{ yugabyte_user }}"
    group: "{{ yugabyte_user }}"
    mode: '0755'

- name: Set system ulimits
  lineinfile:
    path: /etc/security/limits.conf
    line: "{{ item }}"
    create: yes
  loop:
    - "* soft nofile 1048576"
    - "* hard nofile 1048576"
    - "* soft nproc 12000"
    - "* hard nproc 12000"
    - "* soft stack 8192"
    - "* hard stack 8192"
    - "* soft memlock 64"
    - "* hard memlock 64"
    - "* soft cpu unlimited"
    - "* hard cpu unlimited"
    - "* soft fsize unlimited"
    - "* hard fsize unlimited"
    - "* soft data unlimited"
    - "* hard data unlimited"
    - "* soft rss unlimited"
    - "* hard rss unlimited"
    - "* soft vmem unlimited"
    - "* hard vmem unlimited"
    - "* soft msgqueue 819200"
    - "* hard msgqueue 819200"
    - "* soft locks unlimited"
    - "* hard locks unlimited"
    - "* soft core unlimited"
    - "* hard core unlimited"
    - "* soft sigpending 119934"
    - "* hard sigpending 119934"
  notify: Reboot Required

- name: Set kernel parameters
  sysctl:
    name: "{{ item.key }}"
    value: "{{ item.value }}"
    state: present
    reload: yes
  loop:
    - { key: "vm.swappiness", value: "0" }
    - { key: "kernel.core_pattern", value: "{{ yugabyte_home }}/cores/core_%p_%t_%E" }
    - { key: "vm.max_map_count", value: "262144" }

- name: Set transparent hugepage to always
  lineinfile:
    path: "{{ grub_config_file }}"
    regexp: '^GRUB_CMDLINE_LINUX=".*"'
    line: "{{ grub_line }}"
    backrefs: yes
  notify: Reboot Required

- name: Deploy yugabyted systemd service
  template:
    src: yugabyted.service.j2
    dest: "{{ yugabyte_service_file }}"
    owner: root
    group: root
    mode: '0644'

- name: Run post-install script
  command: "{{ yugabyte_post_install_script }}"
  args:
    chdir: "{{ yugabyte_home }}"

- name: Reload systemd (Reload the systemd manager configuration)
  command: systemctl daemon-reload
  become: true

- name: Restart yugabyted service
  systemd:
    name: yugabyted
    state: restarted

- name: Enable yugabyted service
  systemd:
    name: yugabyted
    enabled: true

- name: Start yugabyted service
  systemd:
    name: yugabyted
    state: started

- name: Check yugabyted systemd status
  command: systemctl status yugabyted
  become_user: "{{ yugabyte_user }}"
  register: yugabyted_systemd_status
  changed_when: false
  failed_when: false

- name: Print yugabyted systemd status
  debug:
    var: yugabyted_systemd_status.stdout_lines

- name: Check yugabyted status via CLI
  command: "{{ yugabyte_bin }}/yugabyted status"
  become_user: "{{ yugabyte_user }}"
  register: yugabyte_status
  changed_when: false
  failed_when: false

- name: Print yugabyted CLI status
  debug:
    var: yugabyte_status.stdout
